#!/bin/bash
# Script to split the DTI volume and apply a deformation motion artifact from a .mat file (eddy_correct)
#TODO Testar addpath no matlab de forma generica com pwd
#TODO If the resolution choosen is the same as the original data, the resample step is not used.

usage(){
  echo "  Script to apply a eddy current distortion in a DTI data."
  echo "  Usage: $(basename $0) <Input image> <Distortion matrix> <Number of B0> <Spatial resolution (mm)> <Distortion intensity (integer)>"
  echo ""
  echo "   Input image             = The DTI volume which you want to apply eddy current distortions."
  echo "   Distortion matrix       = A textfile which informs a N*(4x4) affine matrix in order to apply in each volume of the DTI input data. Tip: Use tools/<METHOD>2afflist to generate the ecclog file."
  echo "   Number of B0            = Inform how many B0 volumes your output DTI data should have."
  echo "   Spatial resolution      = Choose a desirable output spatial resolution to your data. For instance, 2 mm."
  echo "   Distortion intensity    = Choose a desirable distortion intensity that will be applied in the Distrotion Matrix translation values. Pass 1 if you want the original distortion."
  echo ""
}

if [[ $# -lt 5 ]]; then
  usage
  exit
fi

INPUT_IMG=$1
if [[ "`echo $(basename ${INPUT_IMG##*.})`" == "gz" ]]; then
  BVAL="$(dirname $INPUT_IMG)/$(basename ${INPUT_IMG%.*.*}).bval"
  BVEC="$(dirname $INPUT_IMG)/$(basename ${INPUT_IMG%.*.*}).bvec"
elif [[ "`echo $(basename ${INPUT_IMG##*.})`" == "nii" ]]; then
  BVAL="$(dirname $INPUT_IMG)/$(basename ${INPUT_IMG%.*}).bval"
  BVEC="$(dirname $INPUT_IMG)/$(basename ${INPUT_IMG%.*}).bvec"
fi

#Check if bvec and bval files exist
if [[ ! -e $BVAL ]]; then
  echo "  Bval file does not exist in the folder!"
  echo "  Set the filename of the bval and bvec files with the same filename as the input file."
  exit
elif [[ ! -e $BVEC ]]; then
  echo "  Bvec file does not exist in the folder!"
  echo "  Set the filename of the bval and bvec files with the same filename as the input file."
  exit
fi


MATRIX=$2
NUM_B0=$3
RESOLUTION=$4
DIST_INT=$5

if [[ "`ls ~ | grep tmp_multishell`" == "" ]]; then
  mkdir ~/tmp_multishell
fi
TMP_PATH="`echo ~`/tmp_multishell/"
FILEPATH=$(dirname $INPUT_IMG)
FILENAME=$(basename ${INPUT_IMG})
FILENAME=""
if [[ "echo ${INPUT_IMG##*.}" == "gz" ]]; then
  gzip -d $INPUT_IMG
  FILENAME=$(basename ${INPUT_IMG%.*})
else
  FILENAME=$(basename ${INPUT_IMG%.*})
fi

echo ""
echo "***** Phantom reconstruction *****"
echo ""

echo "    ==> Resampling the gold standard data with Spherical Harmonics..."
matlab nohup -nodesktop -nodisplay -nosplash << EOF
 addpath(genpath('/home/k1510868/Documents/multishell/'));
 addpath(genpath('/home/k1510868/Documents/MATLAB/NBL_functions/'));

 addpath(genpath('/home/antonio/Documents/GitProjects/multishell'));
 addpath(genpath('/home/antonio/Documents/NBL/spherical_resamp/'));

 multishell_resemp('$TMP_PATH','$INPUT_IMG','$BVAL','$BVEC',$NUM_B0,60,8);

EOF

echo ""
# Downsample to the required spatial resolution
echo "    ==> Downsampling the data to $RESOLUTION mm..."
INPUT_IMG="${TMP_PATH}tmp_resamp.nii"
flirt -in ${INPUT_IMG} -ref ${INPUT_IMG} -out ${TMP_PATH}tmp_dti_${RESOLUTION}mm.nii -interp spline -applyisoxfm $RESOLUTION

# Decompress the 2 mm image
 gzip -d "${TMP_PATH}tmp_dti_${RESOLUTION}mm.nii.gz"

# Resetting the input image variable
INPUT_IMG="${TMP_PATH}tmp_dti_${RESOLUTION}mm.nii"

# Reducing the b0 volumes
fslroi $INPUT_IMG ${TMP_PATH}tmp_cropDTI $((18-$NUM_B0)) -1
INPUT_IMG="${TMP_PATH}tmp_cropDTI.nii.gz"
# Copy the croped image to main folder (This is the gold standard image)
cp ${TMP_PATH}tmp_cropDTI.nii.gz ${FILEPATH}
mv ${FILEPATH}/tmp_cropDTI.nii.gz ${FILEPATH}/${FILENAME}_resamp.nii.gz

# Split the DTI volume in 3D volumes
echo "    ==> Spliting 4D DTI volume to a series of 3D volumes... "
fslsplit ${INPUT_IMG}.nii.gz ${TMP_PATH}tmp_vol_

# Cleaning eddy_correct matrix file to only matrix data
echo "    ==> Formating matrix file..."
 cat $MATRIX | grep -v processing | grep -v Final | grep [[:alnum:]] > ${TMP_PATH}affine_4D.mat

if [[ $DIST_INT -eq 1 ]]; then
#MATLAB: split the affine_4D.mat file into several small affine matrix for each volumes
matlab nohup -nodesktop -nodisplay -nosplash << EOF
table=load('${TMP_PATH}affine_4D.mat','-ascii');

rows=length(table);
out_table=zeros(4,4);
count=0;
for i=1:4:rows
        out_table=table(1*i:1*(i+3),:);
        % scale
        out_table(1,1)=1;
        out_table(2,2)=1;
        out_table(3,3)=1;
        save(sprintf('${TMP_PATH}aff_%d.mat',count),'out_table','-ascii');
        count=count+1;
end
EOF
else
#Apply distortion intensity - $DIST_INT
  echo "    ==> Applying distortion intensity translation on each 3D volume"
  matlab nohup -nodesktop -nodisplay -nosplash << EOF
  table=load('${TMP_PATH}affine_4D.mat','-ascii');

  rows=length(table);
  out_table=zeros(4,4);
  count=0;
  for i=1:4:rows
          out_table=table(1*i:1*(i+3),:);
          % translation distortion
          out_table(1:3,4)=out_table(1:3,4)*$DIST_INT;
          % rotation distortion
          out_table(1,2)=out_table(1,2)*$DIST_INT;
          out_table(1,3)=out_table(1,3)*$DIST_INT;
          out_table(2,3)=out_table(2,3)*$DIST_INT;
          out_table(2,1)=out_table(2,1)*$DIST_INT;
          out_table(3,1)=out_table(3,1)*$DIST_INT;
          out_table(3,2)=out_table(3,2)*$DIST_INT;
          % scale
          out_table(1,1)=1;
          out_table(2,2)=1;
          out_table(3,3)=1;
          save(sprintf('${TMP_PATH}aff_%d.mat',count),'out_table','-ascii');
          count=count+1;
  end
EOF
fi

#Apply transformation on each tmp volume
echo "    ==> Applying affine transformation on each 3D volume"
sizem=4
count=1
while read line; do
  ((count++))
done < ${TMP_PATH}affine_4D.mat

numMat=`echo $(($count/$sizem))`
for (( i = 0; i < $numMat; i++ )); do
  if [[ $i -lt 10 ]]; then
    echo "--> Applying transformation in volume $i"
    flirt -in ${TMP_PATH}tmp_vol_000$i.nii.gz -ref ${TMP_PATH}tmp_vol_000$i.nii.gz -init ${TMP_PATH}aff_$i.mat -out ${TMP_PATH}tmp_vol_000${i}_aff.nii.gz -interp spline -applyxfm
  elif [[ $i -lt 100 && $i -ge 10 ]]; then
    echo "--> Applying transformation in volume $i"
    flirt -in ${TMP_PATH}tmp_vol_00$i.nii.gz -ref ${TMP_PATH}tmp_vol_00$i.nii.gz -init ${TMP_PATH}aff_$i.mat -out ${TMP_PATH}tmp_vol_00${i}_aff.nii.gz -interp spline -applyxfm
  elif [[ $i -lt 1000 && $i -ge 100 ]]; then
    echo "--> Applying transformation in volume $i"
    flirt -in ${TMP_PATH}tmp_vol_0$i.nii.gz -ref ${TMP_PATH}tmp_vol_0$i.nii.gz -init ${TMP_PATH}aff_$i.mat -out ${TMP_PATH}tmp_vol_0${i}_aff.nii.gz -interp spline -applyxfm
  fi
done

# Reconstructing the resampled+distorted volume
echo "    ==> Reconstructing the final DTI volume with eddy current distortions..."
VOLUMES=""
for (( i = 0; i < $numMat; i++ )); do
  if [[ $i -lt 10 ]]; then
    VOLUMES="$VOLUMES `echo "${TMP_PATH}tmp_vol_000${i}_aff.nii.gz "`"
  elif [[ $i -lt 100 && $i -ge 10 ]]; then
    VOLUMES="$VOLUMES `echo "${TMP_PATH}tmp_vol_00${i}_aff.nii.gz "`"
  elif [[ $i -lt 1000 && $i -ge 100 ]]; then
    VOLUMES="$VOLUMES `echo "${TMP_PATH}tmp_vol_0${i}_aff.nii.gz "`"
  fi
done

# Create the final volume with ec distortions
 fslmerge -t ${TMP_PATH}${FILENAME}_ec.nii.gz $VOLUMES
#Removing unncessary files
echo "    ==> Removing unncessary files (tmp, aff, brain_mask downsampled and resampled nii files)"
  cp ${TMP_PATH}${FILENAME}* ${FILEPATH}
  rm -R ${TMP_PATH}

echo ""
echo "***** Phantom reconstruction finished with success *****"
